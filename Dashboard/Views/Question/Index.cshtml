@model IPagedList<QuestionsSYS.ModelViews.QuestionsListView>
@using PagedList
@using PagedList.Mvc

@{
    ViewBag.Title = "Tüm Sorular";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>Sorular</h2>
        <ol class="breadcrumb">
            <li>
                <a href="@Url.Action("Index", "Dashboards")">Yönetim</a>
            </li>
            <li class="active">
                <strong><a>Tüm Sorular</a></strong>
            </li>
        </ol>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="ibox-content">
            <div class="sk-spinner sk-spinner-double-bounce">
                <div class="sk-double-bounce1"></div>
                <div class="sk-double-bounce2"></div>
            </div>
           
            <div class="row">
                <div class="col-md-1"><a id="toExcelBtn" class="btn btn-sm btn-primary search pull-left"><i class="fa fa-file-excel-o"></i> Excel Çıktı</a> </div>
                <div class="col-md-4 col-md-offset-7">
                   
                    <div class="input-group">
                      
                        @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new { @class = "input-sm form-control searchterm", @placeholder = "Ad, Soyad, Tel" })
                        <span class="input-group-btn">
                            <input type="button" id="search-btn" class="btn btn-sm btn-primary search" value="Ara" />
                        </span>
                    </div>
                </div>

            </div>
           
            <div id="question-list" class="table-responsive"></div>
                <div class="m-t-md">
                    <small class="pull-right">
                        Son Liste Tarihi: @Html.Label(DateTime.Now.ToLongDateString())
                    </small>
                </div>
            </div>
    </div>
</div>
<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="ibox-content task-container">
            <div class="sk-spinner sk-spinner-double-bounce">
                <div class="sk-double-bounce1"></div>
                <div class="sk-double-bounce2"></div>
            </div>
            <h2>Görev</h2>
            <p>
                <small>Seçtiğiniz soruları personele görevlendirmek aşağıda formu doldurun.</small>
            </p>            
            <div class="form-inline">
                <div class="form-group">
                    <label for="role" class="sr-only">Rol</label>
                    <select name="source" id="source" class="personnel-list form-control">
                        <option></option>
                        @foreach (var item in ViewBag.personnel)
                        {
                            <option value="@item.Id">@item.Name @item.Surname </option>
                        }
                    </select>
                    <button id="add_task" class="btn  btn-sm btn-primary no-margins">Görev Ekle</button>
                </div>
             </div>
            
            
        </div>
    </div>
</div>

    @section Styles{
        @Styles.Render("~/plugins/toastrStyles")
        @Styles.Render("~/plugins/awesomeCheckboxStyles")
        @Styles.Render("~/plugins/select2Styles")
    }
    @section Scripts{
        @Scripts.Render("~/plugins/toastr")
        @Scripts.Render("~/plugins/select2")
        @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js");
        <script type="text/javascript">

            $(document).ready(function () {
                $.ajax({
                    type: "GET",
                    url: "All",
                    beforeSend: function () {
                        $(".task-container").toggleClass('sk-loading');
                    },
                    success: function (responseData) {
                        $(".task-container").toggleClass('sk-loading');
                        $('#question-list').html(responseData);
                    }
                })

                $(".personnel-list").select2({
                    placeholder: "Personel seçin",
                    allowClear: true
                });

                $("#toExcelBtn").on("click", function () {
                    var questions = [];
                    
                    $("#question-list input:checked").each(cbx => {
                        var item = $($("#question-list input:checked")[cbx]);
                        var id = item.attr("data-item");
                        questions.push(id);
                    })
                    
                    $.ajax({
                        type: "POST",
                        url: "/Question/ExportToExcel",
                        data: { questions },
                        beforeSend: function () {
                            $("#question-list").toggleClass('sk-loading');
                        },
                        success: function (responseData) {
                            $("#question-list").toggleClass('sk-loading');
                            window.open("/Question/DownloadExcelExport");
                        },
                        error: function (e) {
                            $("#question-list").toggleClass('sk-loading');

                            if (e.status == 501) {
                                toastr.error("Bir hata oluştu.", "Hata");
                                return;
                            }
                            toastr.error("Bir hata oluştu. Sayfayı yeniledikten sonra tekrar deneyin.", "Hata");

                        }
                    })

                });

                    

                $("#add_task").on("click", function () {
                    var data = { user_id: $(".personnel-list").val(), questions: [] };
                    var selectedQuestions = Array.from($(".checkbox-success input:checked"));
                    selectedQuestions.forEach(sq => data.questions.push($(sq).attr("data-item")));

                    $.ajax({
                        type: "POST",
                        url: "/Task/Add",
                        data: data,
                        beforeSend: function () {
                            $(".task-container").toggleClass('sk-loading');
                        },
                        success: function (responseData) {
                            toastr.success("Görev atandı.", "Tamam");
                            $(".task-container").toggleClass('sk-loading');
                        },
                        error: function (e) {
                            $(".task-container").toggleClass('sk-loading');

                            if (e.status == 501) {
                                toastr.error("Seçtiğiniz personele daha önce seçtiğiniz soru aktarılmış", "Hata");
                                return;
                            }
                            toastr.error("Personel seçmediniz veya bir hata oluştu. Sayfayı yenileyip tekrar deneyin.", "Hata");
                            
                        }
                    })
                })




                $("#search-btn").on("click", function () {

                    var SearchString = $(".searchterm").val();
                    var QueryString = getParameterByName("filter") || "All";


                    var url = updateQueryStringParameter(location.href, "filter", QueryString);
                    url = updateQueryStringParameter(url, "SearchString", SearchString);

                    var newurl = url;
                    window.history.pushState({ path: newurl }, '', newurl);

                    $.ajax({
                        type: "GET",
                        url: QueryString + "?SearchString=" + SearchString,
                        beforeSend: function () {
                            PageBegin();
                        },
                        success: function (responseData) {
                            PageComplate();
                            $('#question-list').html(responseData);
                        }
                    });
                });
            });

            function DeleteSuccess(e) {
                $(e).parents("tr").remove();
                $(".pagination-container").first().remove();
                toastr.success("Kayıt silindi.", "Tamam");
            }
            function DeleteFailed() {
                toastr.error("Kayıt silinmedi. tekrar deneyin.", "Hata")
            }

            function Begin() {
                $('.ibox-content').toggleClass('sk-loading');
            }

            function OnComplate() {
                $('.ibox-content').toggleClass('sk-loading');
                $('.ibox-content').removeClass('sk-loading');
            }

            if (location.search.indexOf("success=failed_remove") > -1) {
                toastr.error("Kayıt silinmedi. tekrar deneyin.", "Hata")
            }
            if (location.search.indexOf("success=delete_ok") > -1) {
                toastr.success("Kayıt silindi.", "Tamam")
            }

            function updateQueryStringParameter(uri, key, value) {
                var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
                var separator = uri.indexOf('?') !== -1 ? "&" : "?";
                if (uri.match(re)) {
                    return uri.replace(re, '$1' + key + "=" + value + '$2');
                }
                else {
                    return uri + separator + key + "=" + value;
                }
            }
            function removeURLParameter(url, parameter) {
                //prefer to use l.search if you have a location/link object
                var urlparts = url.split('?');
                if (urlparts.length >= 2) {

                    var prefix = encodeURIComponent(parameter) + '=';
                    var pars = urlparts[1].split(/[&;]/g);

                    //reverse iteration as may be destructive
                    for (var i = pars.length; i-- > 0;) {
                        //idiom for string.startsWith
                        if (pars[i].lastIndexOf(prefix, 0) !== -1) {
                            pars.splice(i, 1);
                        }
                    }

                    url = urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");
                    return url;
                } else {
                    return url;
                }
            }
            function getParameterByName(name, url) {
                if (!url) url = window.location.href;
                name = name.replace(/[\[\]]/g, "\\$&");
                var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                    results = regex.exec(url);
                if (!results) return null;
                if (!results[2]) return '';
                return decodeURIComponent(results[2].replace(/\+/g, " "));
            }
        </script>
    }
